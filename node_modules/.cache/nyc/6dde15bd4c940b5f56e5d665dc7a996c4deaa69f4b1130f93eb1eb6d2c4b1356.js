const express = require('express')
const async = require('async')

module.exports = servicePublication => {
const router = express.Router()

  
  // À COMPLÉTER
  router.get('/',(req,res,next)=>{

    const sortBy= req.query.sort_by
    const orderBy=req.query.order_by
    var sort =[]

    if (sortBy  && orderBy)
      if (sortBy === "title")
        sort = [['title', orderBy]]
      else
        sort = [['year', orderBy], ['month', orderBy]]
    else
        sort = [['title', 'desc']]//,['year', 'desc'], ['month', 'desc']]

    var paginationOp = 
      {
        
          pageNumber: (req.query.page) ? req.query.page : 1,
          limit: (req.query.limit) ? req.query.limit : 10,
          sorting: sort
        
      }
    

    
    
      
    servicePublication.getPublications(paginationOp)( async (err,publis)=>{

      if(err){

        if (req.app.locals.t["ERRORS"] === undefined || req.app.locals.t["ERRORS"]["PUBS_ERROR"] === undefined)
          res.status(500).json({"errors": [err.message] })
          
        else
          res.status(500).json({ "errors": [req.app.locals.t["ERRORS"]["PUBS_ERROR"]] })
         

      }

      else

        try {

          const publisLength = await servicePublication.getNumberOfPublications((err, nbPubs) => { 
            
            

            if(publis!== undefined && nbPubs !== undefined)
              pubs = {
                count: nbPubs,
                publications: publis,
              
              }
              
              
                res.status(200).json(pubs)
            
          
          });     
        
        
        
        }
        catch(e) {next(e.message)}
    }
      )
    
  })




   router.post('/', async (req,res,next)=>{

    
     
    await servicePublication.createPublication(req.body)((err, data)=>{

    try {
      if (err)
        
        
        {
          
          if (req.app.locals.t["ERRORS"] === undefined  || req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"])
            res.status(500).json({ "errors": [err.message] })
          else
            res.status(500).json({"errors":[req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"]]})
        }
        
      else
        {
          console.log("data", data)
          
          if (req.body === undefined || req.body === null) 
            if (req.app.locals.t["ERRORS"] !== undefined && req.app.locals.t["ERRORS"]["EMPTY_PUBLICATION_FORM"] !== undefined)
              res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["EMPTY_PUBLICATION_FORM"]]})

          else 

            let body = await (req.body)

            if(body.authors === undefined) 
              if  (req.app.locals.t["ERRORS"] === undefined || req.app.locals.t["ERRORS"]["AUTHOR_EMPTY_FORM"] === undefined)
                res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["AUTHOR_EMPTY_FORM"]]}) 
              

            else if ( req.body.year === undefined || isNaN(req.body.year))
              if (req.app.locals.t["ERRORS"] !== undefined && req.app.locals.t["ERRORS"]["YEAR_NOT_INT_FORM"] !== undefined)
                res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["YEAR_NOT_INT_FORM"]]})
              
              /* if (req.app.locals.t["ERRORS"] !== undefined && req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"] !== undefined)
                console.log("ikram3")
                res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"]]}) */
              
              else
                res.sendStatus(201)
        }}catch(e) {console.log(e)}

     }  )
  }) 


  router.delete('/:id',(req,res,next)=>{
    servicePublication.removePublication(req.params.id)((err,publications)=>{
    if(err){

      if (req.app.locals.t["ERRORS"] === undefined  || req.app.locals.t["ERRORS"]["PUB_DELETE_ERROR"])
        res.status(500).json(err.message)

      else
        res.status(500).json({ "errors": [ req.app.locals.t["ERRORS"]["PUB_DELETE_ERROR"]] })
    }
    else
      res.status(200).end()
  })
  }) 

  return router
}


