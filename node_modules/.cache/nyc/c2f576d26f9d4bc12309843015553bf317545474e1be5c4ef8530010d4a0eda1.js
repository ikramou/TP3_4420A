const express = require('express')
const async = require('async')

module.exports = servicePublication => {
const router = express.Router()

  
  // À COMPLÉTER
  router.get('/',(req,res,next)=>{

    const sortBy= req.query.sort_by
    const orderBy=req.query.order_by
    var sort =[]

    if (sortBy  && orderBy)
      if (sortBy === "title")
        sort = [['title', orderBy]]
      else
        sort = [['year', orderBy], ['month', orderBy]]
    else
        sort = [['title', 'desc']]//,['year', 'desc'], ['month', 'desc']]

    var paginationOp = 
      {
        
          pageNumber: (req.query.page) ? req.query.page : 1,
          limit: (req.query.limit) ? req.query.limit : 10,
          sorting: sort
        
      }
    

    
    
      
    servicePublication.getPublications(paginationOp)( async (err,publis)=>{

      if(err){

        if (req.app.locals.t["ERRORS"] === undefined || req.app.locals.t["ERRORS"]["PUBS_ERROR"] === undefined)
          res.status(500).json({"errors": [err.message] })
          
        else
          res.status(500).json({ "errors": [req.app.locals.t["ERRORS"]["PUBS_ERROR"]] })
         

      }

      else

        try {

          const publisLength = await servicePublication.getNumberOfPublications((err, nbPubs) => { 
            
            

            if(publis!== undefined && nbPubs !== undefined)
              pubs = {
                count: nbPubs,
                publications: publis,
              
              }
              
              
                res.status(200).json(pubs)
            
          
          });     
        
        
        
        }
        catch(e) {next(e.message)}
    }
      )
    
  })




   router.post('/', (req,res,next)=>{

    
     
    servicePublication.createPublication(req.body)((err, data)=>{

        
      if (err)
        
        console.log('erro',err)
        {
          
          if (req.app.locals.t["ERRORS"] === undefined  || req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"])
            res.status(500).json({"errors": [err.message]})
          else
            res.status(500).json({"errors":[req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"]]})
        }

      else
        {
          if (req.body === undefined || req.body === null) 

            if (req.app.locals.t["ERRORS"] === undefined || req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"] === undefined)
              res.status(400).json({"errors": [err.message]})
              
            else
              res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"]]})

          
           else /*
            
            if(req.body.authors === undefined || req.body.authors === null)
              if  (req.app.locals.t["ERRORS"] === undefined || req.app.locals.t["ERRORS"]["PUB_CREATE_ERROR"] === undefined)
                res.status(400).json({"errors":[req.app.locals.t["ERRORS"]["AUTHOR_EMPTY_FORM"]]}) */
          res.sendStatus(201)
        }

    })
  }) 


  /* router.delete('/:id',(req,res,next)=>{
    servicePublication.removePublication(req.params.id)((err,publications)=>{
    if(err){

      if (req.app.locals.t["ERRORS"] === undefined  || req.app.locals.t["ERRORS"]["PUB_DELETE_ERROR"])
        res.status(500).json(err.message)

      else
        res.status(500).json({ "errors": [ req.app.locals.t["ERRORS"]["PUB_DELETE_ERROR"]] })
    }
    else
      res.status(200).end()
  })
  }) */

  return router
}


